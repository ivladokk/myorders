<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KellermanSoftware.Word-Reports</name>
    </assembly>
    <members>
        <member name="T:KellermanSoftware.WordReports.ColumnDefinition">
            <summary>
            Defines the formatting and other options for a column
            </summary>
        </member>
        <member name="M:KellermanSoftware.WordReports.ColumnDefinition.#ctor(System.String)">
            <summary>
            Setup Defaults
            </summary>
        </member>
        <member name="P:KellermanSoftware.WordReports.ColumnDefinition.ColumnName">
            <summary>
            The name of the column in the DataTable or object property.
            It must match exactly
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\ExampleTemplate.docx";
            const string outputDocumentPath = "ExampleOutput.docx";
             
            using (Document document = generator.DocumentFactory(sourceDocumentPath))
            {
                DataTable dataTable = new DataTable();
                dataTable.Columns.Add("FirstName", typeof (string));
                dataTable.Columns.Add("LastName", typeof (string));
                dataTable.Columns.Add("BirthDate", typeof (DateTime));
             
                dataTable.Rows.Add("John", "Smith", DateTime.Now.AddYears(-40));
                dataTable.Rows.Add("Joe", "Jones", DateTime.Now.AddYears(-22));
             
                List&lt;ColumnDefinition&gt; columnDefinitions =
            new List&lt;ColumnDefinition&gt;
                    {
                        new ColumnDefinition("LastName"),
                        new ColumnDefinition("FirstName"),
                        new ColumnDefinition("BirthDate")
                    };
             
                Dictionary&lt;string, ReplacementItem&gt; replacement =
                    new Dictionary&lt;string, ReplacementItem&gt;
                        {
                            {
                                "[ReplaceMe]",
                                new ReplacementItem {Value = dataTable, ColumnDefinitions = columnDefinitions}
                            }
                        };
             
                generator.Replace(document, replacement);
                generator.SaveDocument(document, outputDocumentPath);
            }</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\ExampleTemplate.docx"
            Const outputDocumentPath As String = "ExampleOutput.docx"
             
            Using document As Document = generator.DocumentFactory(sourceDocumentPath)
                Dim dataTable As New DataTable()
                dataTable.Columns.Add("FirstName", GetType(String))
                dataTable.Columns.Add("LastName", GetType(String))
                dataTable.Columns.Add("BirthDate", GetType(Date))
             
                dataTable.Rows.Add("John", "Smith", Date.Now.AddYears(-40))
                dataTable.Rows.Add("Joe", "Jones", Date.Now.AddYears(-22))
             
                Dim columnDefinitions As New List(Of ColumnDefinition)() From { _
                    New ColumnDefinition("LastName"), _
                    New ColumnDefinition("FirstName"), _
                    New ColumnDefinition("BirthDate") _
                }
             
                Dim replacement As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = dataTable, .ColumnDefinitions = columnDefinitions} }}
             
                generator.Replace(document, replacement)
                generator.SaveDocument(document, outputDocumentPath)
            End Using</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.WordReports.ColumnDefinition.HeaderText">
            <summary>
            The text for the header
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\ExampleTemplate.docx";
            const string outputDocumentPath = "ExampleOutput.docx";
             
            using (Document document = generator.DocumentFactory(sourceDocumentPath))
            {
                DataTable dataTable = new DataTable();
                dataTable.Columns.Add("FirstName", typeof(string));
                dataTable.Columns.Add("LastName", typeof(string));
                dataTable.Columns.Add("BirthDate", typeof(DateTime));
             
                dataTable.Rows.Add("John", "Smith", DateTime.Now.AddYears(-40));
                dataTable.Rows.Add("Joe", "Jones", DateTime.Now.AddYears(-22));
             
                List&lt;ColumnDefinition&gt; columnDefinitions =
            new List&lt;ColumnDefinition&gt;
                    {
                        new ColumnDefinition("LastName")
                            {
                                HeaderText = "Last"
                            },
                        new ColumnDefinition("FirstName")
                             {
                                HeaderText = "First"
                            },
                        new ColumnDefinition("BirthDate")
                            {
                                HeaderText = "Date of Birth"
                            }
                    };
             
                Dictionary&lt;string, ReplacementItem&gt; replacement =
                    new Dictionary&lt;string, ReplacementItem&gt;
                        {
                            {
                                "[ReplaceMe]",
                                new ReplacementItem {Value = dataTable, ColumnDefinitions = columnDefinitions}
                            }
                        };
             
                generator.Replace(document, replacement);
                generator.SaveDocument(document, outputDocumentPath);
            }</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\ExampleTemplate.docx"
            Const outputDocumentPath As String = "ExampleOutput.docx"
             
            Using document As Document = generator.DocumentFactory(sourceDocumentPath)
                Dim dataTable As New DataTable()
                dataTable.Columns.Add("FirstName", GetType(String))
                dataTable.Columns.Add("LastName", GetType(String))
                dataTable.Columns.Add("BirthDate", GetType(Date))
             
                dataTable.Rows.Add("John", "Smith", Date.Now.AddYears(-40))
                dataTable.Rows.Add("Joe", "Jones", Date.Now.AddYears(-22))
             
                Dim columnDefinitions As New List(Of ColumnDefinition)() From { _
                    New ColumnDefinition("LastName") With {.HeaderText = "Last"}, _
                    New ColumnDefinition("FirstName") With {.HeaderText = "First"}, _
                    New ColumnDefinition("BirthDate") With {.HeaderText = "Date of Birth"} _
                }
             
                Dim replacement As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = dataTable, .ColumnDefinitions = columnDefinitions} }}
             
                generator.Replace(document, replacement)
                generator.SaveDocument(document, outputDocumentPath)
            End Using</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.WordReports.ColumnDefinition.CustomFormatString">
            <summary>
            A .NET Custom Format String 
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\ExampleTemplate.docx";
            const string outputDocumentPath = "ExampleOutput.docx";
             
            using (Document document = generator.DocumentFactory(sourceDocumentPath))
            {
                DataTable dataTable = new DataTable();
                dataTable.Columns.Add("FirstName", typeof(string));
                dataTable.Columns.Add("LastName", typeof(string));
                dataTable.Columns.Add("BirthDate", typeof(DateTime));
             
                dataTable.Rows.Add("John", "Smith", DateTime.Now.AddYears(-40));
                dataTable.Rows.Add("Joe", "Jones", DateTime.Now.AddYears(-22));
             
                List&lt;ColumnDefinition&gt; columnDefinitions =
            new List&lt;ColumnDefinition&gt;
                    {
                        new ColumnDefinition("LastName"),
                        new ColumnDefinition("FirstName"),
                        new ColumnDefinition("BirthDate")
                            {
                                CustomFormatString = "yyyy-MM-dd"
                            }
                    };
             
                Dictionary&lt;string, ReplacementItem&gt; replacement =
                    new Dictionary&lt;string, ReplacementItem&gt;
                        {
                            {
                                "[ReplaceMe]",
                                new ReplacementItem {Value = dataTable, ColumnDefinitions = columnDefinitions}
                            }
                        };
             
                generator.Replace(document, replacement);
                generator.SaveDocument(document, outputDocumentPath);
            }</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\ExampleTemplate.docx"
            Const outputDocumentPath As String = "ExampleOutput.docx"
             
            Using document As Document = generator.DocumentFactory(sourceDocumentPath)
                Dim dataTable As New DataTable()
                dataTable.Columns.Add("FirstName", GetType(String))
                dataTable.Columns.Add("LastName", GetType(String))
                dataTable.Columns.Add("BirthDate", GetType(Date))
             
                dataTable.Rows.Add("John", "Smith", Date.Now.AddYears(-40))
                dataTable.Rows.Add("Joe", "Jones", Date.Now.AddYears(-22))
             
                Dim columnDefinitions As New List(Of ColumnDefinition)() From { _
                    New ColumnDefinition("LastName"), _
                    New ColumnDefinition("FirstName"), _
                    New ColumnDefinition("BirthDate") With {.CustomFormatString = "yyyy-MM-dd"} _
                }
             
                Dim replacement As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = dataTable, .ColumnDefinitions = columnDefinitions} }}
             
                generator.Replace(document, replacement)
                generator.SaveDocument(document, outputDocumentPath)
            End Using</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.WordReports.ColumnDefinition.AddTotalAtTheEnd">
            <summary>
            Add a total (sum) at the end of this column
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\ExampleTemplate.docx";
            const string outputDocumentPath = "ExampleOutput.docx";
             
            using (Document document = generator.DocumentFactory(sourceDocumentPath))
            {
                DataTable dataTable = new DataTable();
                dataTable.Columns.Add("FirstName", typeof(string));
                dataTable.Columns.Add("LastName", typeof(string));
                dataTable.Columns.Add("Salary", typeof(decimal));
             
                dataTable.Rows.Add("John", "Smith", 30000M);
                dataTable.Rows.Add("Joe", "Jones", 45000M);
             
                List&lt;ColumnDefinition&gt; columnDefinitions =
            new List&lt;ColumnDefinition&gt;
                    {
                        new ColumnDefinition("LastName"),
                        new ColumnDefinition("FirstName"),
                        new ColumnDefinition("Salary")
                            {
                                AddTotalAtTheEnd = true
                            }
                    };
             
                Dictionary&lt;string, ReplacementItem&gt; replacement =
                    new Dictionary&lt;string, ReplacementItem&gt;
                        {
                            {
                                "[ReplaceMe]",
                                new ReplacementItem {Value = dataTable, ColumnDefinitions = columnDefinitions}
                            }
                        };
             
                generator.Replace(document, replacement);
                generator.SaveDocument(document, outputDocumentPath);
            }</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\ExampleTemplate.docx"
            Const outputDocumentPath As String = "ExampleOutput.docx"
             
            Using document As Document = generator.DocumentFactory(sourceDocumentPath)
                Dim dataTable As New DataTable()
                dataTable.Columns.Add("FirstName", GetType(String))
                dataTable.Columns.Add("LastName", GetType(String))
                dataTable.Columns.Add("Salary", GetType(Decimal))
             
                dataTable.Rows.Add("John", "Smith", 30000D)
                dataTable.Rows.Add("Joe", "Jones", 45000D)
             
                Dim columnDefinitions As New List(Of ColumnDefinition)() From { _
                    New ColumnDefinition("LastName"), _
                    New ColumnDefinition("FirstName"), _
                    New ColumnDefinition("Salary") With {.AddTotalAtTheEnd = True} _
                }
             
                Dim replacement As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = dataTable, .ColumnDefinitions = columnDefinitions} }}
             
                generator.Replace(document, replacement)
                generator.SaveDocument(document, outputDocumentPath)
            End Using</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.WordReports.ColumnDefinition.BackgroundColor">
            <summary>
            The background color of the column. The default is White
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\ExampleTemplate.docx";
            const string outputDocumentPath = "ExampleOutput.docx";
             
            using (Document document = generator.DocumentFactory(sourceDocumentPath))
            {
                DataTable dataTable = new DataTable();
                dataTable.Columns.Add("FirstName", typeof(string));
                dataTable.Columns.Add("LastName", typeof(string));
                dataTable.Columns.Add("Salary", typeof(decimal));
             
                dataTable.Rows.Add("John", "Smith", 30000M);
                dataTable.Rows.Add("Joe", "Jones", 45000M);
             
                List&lt;ColumnDefinition&gt; columnDefinitions =
            new List&lt;ColumnDefinition&gt;
                    {
                        new ColumnDefinition("LastName"),
                        new ColumnDefinition("FirstName"),
                        new ColumnDefinition("Salary")
                            {
                                BackgroundColor = System.Drawing.Color.Gray
                            }
                    };
             
                Dictionary&lt;string, ReplacementItem&gt; replacement =
                    new Dictionary&lt;string, ReplacementItem&gt;
                        {
                            {
                                "[ReplaceMe]",
                                new ReplacementItem {Value = dataTable, ColumnDefinitions = columnDefinitions}
                            }
                        };
             
                generator.Replace(document, replacement);
                generator.SaveDocument(document, outputDocumentPath);
            }</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\ExampleTemplate.docx"
            Const outputDocumentPath As String = "ExampleOutput.docx"
             
            Using document As Document = generator.DocumentFactory(sourceDocumentPath)
                Dim dataTable As New DataTable()
                dataTable.Columns.Add("FirstName", GetType(String))
                dataTable.Columns.Add("LastName", GetType(String))
                dataTable.Columns.Add("Salary", GetType(Decimal))
             
                dataTable.Rows.Add("John", "Smith", 30000D)
                dataTable.Rows.Add("Joe", "Jones", 45000D)
             
                Dim columnDefinitions As New List(Of ColumnDefinition)() From { _
                    New ColumnDefinition("LastName"), _
                    New ColumnDefinition("FirstName"), _
                    New ColumnDefinition("Salary") With {.BackgroundColor = System.Drawing.Color.Gray} _
                }
             
                Dim replacement As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = dataTable, .ColumnDefinitions = columnDefinitions} }}
             
                generator.Replace(document, replacement)
                generator.SaveDocument(document, outputDocumentPath)
            End Using</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.WordReports.ColumnDefinition.ForegroundColor">
            <summary>
            The foreground color of the column. The default is Black
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\ExampleTemplate.docx";
            const string outputDocumentPath = "ExampleOutput.docx";
             
            using (Document document = generator.DocumentFactory(sourceDocumentPath))
            {
                DataTable dataTable = new DataTable();
                dataTable.Columns.Add("FirstName", typeof(string));
                dataTable.Columns.Add("LastName", typeof(string));
                dataTable.Columns.Add("Salary", typeof(decimal));
             
                dataTable.Rows.Add("John", "Smith", 30000M);
                dataTable.Rows.Add("Joe", "Jones", 45000M);
             
                List&lt;ColumnDefinition&gt; columnDefinitions =
            new List&lt;ColumnDefinition&gt;
                    {
                        new ColumnDefinition("LastName"),
                        new ColumnDefinition("FirstName"),
                        new ColumnDefinition("Salary")
                            {
                                ForegroundColor = System.Drawing.Color.Green
                            }
                    };
             
                Dictionary&lt;string, ReplacementItem&gt; replacement =
                    new Dictionary&lt;string, ReplacementItem&gt;
                        {
                            {
                                "[ReplaceMe]",
                                new ReplacementItem {Value = dataTable, ColumnDefinitions = columnDefinitions}
                            }
                        };
             
                generator.Replace(document, replacement);
                generator.SaveDocument(document, outputDocumentPath);
            }</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\ExampleTemplate.docx"
            Const outputDocumentPath As String = "ExampleOutput.docx"
             
            Using document As Document = generator.DocumentFactory(sourceDocumentPath)
                Dim dataTable As New DataTable()
                dataTable.Columns.Add("FirstName", GetType(String))
                dataTable.Columns.Add("LastName", GetType(String))
                dataTable.Columns.Add("Salary", GetType(Decimal))
             
                dataTable.Rows.Add("John", "Smith", 30000D)
                dataTable.Rows.Add("Joe", "Jones", 45000D)
             
                Dim columnDefinitions As New List(Of ColumnDefinition)() From { _
                    New ColumnDefinition("LastName"), _
                    New ColumnDefinition("FirstName"), _
                    New ColumnDefinition("Salary") With {.ForegroundColor = System.Drawing.Color.Green} _
                }
             
                Dim replacement As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = dataTable, .ColumnDefinitions = columnDefinitions} }}
             
                generator.Replace(document, replacement)
                generator.SaveDocument(document, outputDocumentPath)
            End Using</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.WordReports.ColumnDefinition.TotalBold">
            <summary>
            Determines if the Total for this column will be bolded.  
            Works in conjunction with AddTotalAtTheEnd.
            The default is true.
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\ExampleTemplate.docx";
            const string outputDocumentPath = "ExampleOutput.docx";
             
            using (Document document = generator.DocumentFactory(sourceDocumentPath))
            {
                DataTable dataTable = new DataTable();
                dataTable.Columns.Add("FirstName", typeof(string));
                dataTable.Columns.Add("LastName", typeof(string));
                dataTable.Columns.Add("Salary", typeof(decimal));
             
                dataTable.Rows.Add("John", "Smith", 30000M);
                dataTable.Rows.Add("Joe", "Jones", 45000M);
             
                List&lt;ColumnDefinition&gt; columnDefinitions =
            new List&lt;ColumnDefinition&gt;
                    {
                        new ColumnDefinition("LastName"),
                        new ColumnDefinition("FirstName"),
                        new ColumnDefinition("Salary")
                            {
                                AddTotalAtTheEnd = true,
                                TotalBold = true
                            }
                    };
             
                Dictionary&lt;string, ReplacementItem&gt; replacement =
                    new Dictionary&lt;string, ReplacementItem&gt;
                        {
                            {
                                "[ReplaceMe]",
                                new ReplacementItem {Value = dataTable, ColumnDefinitions = columnDefinitions}
                            }
                        };
             
                generator.Replace(document, replacement);
                generator.SaveDocument(document, outputDocumentPath);
            }</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\ExampleTemplate.docx"
            Const outputDocumentPath As String = "ExampleOutput.docx"
             
            Using document As Document = generator.DocumentFactory(sourceDocumentPath)
                Dim dataTable As New DataTable()
                dataTable.Columns.Add("FirstName", GetType(String))
                dataTable.Columns.Add("LastName", GetType(String))
                dataTable.Columns.Add("Salary", GetType(Decimal))
             
                dataTable.Rows.Add("John", "Smith", 30000D)
                dataTable.Rows.Add("Joe", "Jones", 45000D)
             
                Dim columnDefinitions As New List(Of ColumnDefinition)() From { _
                    New ColumnDefinition("LastName"), _
                    New ColumnDefinition("FirstName"), _
                    New ColumnDefinition("Salary") With {.AddTotalAtTheEnd = True, .TotalBold = True} _
                }
             
                Dim replacement As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = dataTable, .ColumnDefinitions = columnDefinitions} }}
             
                generator.Replace(document, replacement)
                generator.SaveDocument(document, outputDocumentPath)
            End Using</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.WordReports.Common.InsertSpaces(System.String)">
            <summary>
            Insert spaces into a string 
            </summary>
            <example>
            OrderDetails = Order Details
            10Net30 = 10 Net 30
            FTPHost = FTP Host
            </example> 
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:KellermanSoftware.WordReports.Configuration">
            <summary>
            Global configuration for Word Reports
            </summary>
        </member>
        <member name="M:KellermanSoftware.WordReports.Configuration.#ctor">
            <summary>
            Initialize Defaults
            </summary>
        </member>
        <member name="P:KellermanSoftware.WordReports.Configuration.CreateHeader">
            <summary>
            Create a header for tables. The default is true.
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\ExampleTemplate.docx";
            const string outputDocumentPath = "ExampleOutput.docx";
             
            using (Document document = generator.DocumentFactory(sourceDocumentPath))
            {
                DataTable dataTable = new DataTable();
                dataTable.Columns.Add("FirstName", typeof (string));
                dataTable.Rows.Add("John");
                Dictionary&lt;string, ReplacementItem&gt; replacement =
                    new Dictionary&lt;string, ReplacementItem&gt;
                        {
                            {
                                "[ReplaceMe]",
                                new ReplacementItem {Value = dataTable}
                            }
                        };
             
                generator.Config.CreateHeader = false;
             
                generator.Replace(document, replacement);
             
                generator.SaveDocument(document, outputDocumentPath);
            }</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\ExampleTemplate.docx"
            Const outputDocumentPath As String = "ExampleOutput.docx"
             
            Using document As Document = generator.DocumentFactory(sourceDocumentPath)
                Dim dataTable As New DataTable()
                dataTable.Columns.Add("FirstName", GetType(String))
                dataTable.Rows.Add("John")
                Dim replacement As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = dataTable} }}
             
                generator.Config.CreateHeader = False
             
                generator.Replace(document, replacement)
             
                generator.SaveDocument(document, outputDocumentPath)
            End Using</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.WordReports.Configuration.HeaderBackgroundColor">
            <summary>
            The background color of the header for tables. The default is Black
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\ExampleTemplate.docx";
            const string outputDocumentPath = "ExampleOutput.docx";
             
            using (Document document = generator.DocumentFactory(sourceDocumentPath))
            {
                DataTable dataTable = new DataTable();
                dataTable.Columns.Add("FirstName", typeof(string));
                dataTable.Rows.Add("John");
                Dictionary&lt;string, ReplacementItem&gt; replacement =
                    new Dictionary&lt;string, ReplacementItem&gt;
                        {
                            {
                                "[ReplaceMe]",
                                new ReplacementItem {Value = dataTable}
                            }
                        };
             
                generator.Config.HeaderBackgroundColor = System.Drawing.Color.Blue;
             
                generator.Replace(document, replacement);
             
                generator.SaveDocument(document, outputDocumentPath);
            }</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\ExampleTemplate.docx"
            Const outputDocumentPath As String = "ExampleOutput.docx"
             
            Using document As Document = generator.DocumentFactory(sourceDocumentPath)
                Dim dataTable As New DataTable()
                dataTable.Columns.Add("FirstName", GetType(String))
                dataTable.Rows.Add("John")
                Dim replacement As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = dataTable} }}
             
                generator.Config.HeaderBackgroundColor = System.Drawing.Color.Blue
             
                generator.Replace(document, replacement)
             
                generator.SaveDocument(document, outputDocumentPath)
            End Using</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.WordReports.Configuration.HeaderForegroundColor">
            <summary>
            The foreground color of the header for tables. The default is White
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\ExampleTemplate.docx";
            const string outputDocumentPath = "ExampleOutput.docx";
             
            using (Document document = generator.DocumentFactory(sourceDocumentPath))
            {
                DataTable dataTable = new DataTable();
                dataTable.Columns.Add("FirstName", typeof(string));
                dataTable.Rows.Add("John");
                Dictionary&lt;string, ReplacementItem&gt; replacement =
                    new Dictionary&lt;string, ReplacementItem&gt;
                        {
                            {
                                "[ReplaceMe]",
                                new ReplacementItem {Value = dataTable}
                            }
                        };
             
                generator.Config.HeaderForegroundColor = System.Drawing.Color.Yellow;
             
                generator.Replace(document, replacement);
             
                generator.SaveDocument(document, outputDocumentPath);
            }</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\ExampleTemplate.docx"
            Const outputDocumentPath As String = "ExampleOutput.docx"
             
            Using document As Document = generator.DocumentFactory(sourceDocumentPath)
                Dim dataTable As New DataTable()
                dataTable.Columns.Add("FirstName", GetType(String))
                dataTable.Rows.Add("John")
                Dim replacement As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = dataTable} }}
             
                generator.Config.HeaderForegroundColor = System.Drawing.Color.Yellow
             
                generator.Replace(document, replacement)
             
                generator.SaveDocument(document, outputDocumentPath)
            End Using</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.WordReports.Configuration.InsertSpacesIntoHeaderColumns">
            <summary>
            Insert spaces into header columns for tables based on capitilization.
            The default is True
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\ExampleTemplate.docx";
            const string outputDocumentPath = "ExampleOutput.docx";
             
            using (Document document = generator.DocumentFactory(sourceDocumentPath))
            {
                DataTable dataTable = new DataTable();
                dataTable.Columns.Add("FirstName", typeof(string));
                dataTable.Rows.Add("John");
                Dictionary&lt;string, ReplacementItem&gt; replacement =
                    new Dictionary&lt;string, ReplacementItem&gt;
                        {
                            {
                                "[ReplaceMe]",
                                new ReplacementItem {Value = dataTable}
                            }
                        };
             
                generator.Config.InsertSpacesIntoHeaderColumns = false;
             
                generator.Replace(document, replacement);
             
                generator.SaveDocument(document, outputDocumentPath);
            }</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\ExampleTemplate.docx"
            Const outputDocumentPath As String = "ExampleOutput.docx"
             
            Using document As Document = generator.DocumentFactory(sourceDocumentPath)
                Dim dataTable As New DataTable()
                dataTable.Columns.Add("FirstName", GetType(String))
                dataTable.Rows.Add("John")
                Dim replacement As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = dataTable} }}
             
                generator.Config.InsertSpacesIntoHeaderColumns = False
             
                generator.Replace(document, replacement)
             
                generator.SaveDocument(document, outputDocumentPath)
            End Using</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.WordReports.Configuration.InsertSpacesIntoEnumValues">
            <summary>
            Insert spaces into enum values based on capitilization.
            The default is True
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\ExampleTemplate.docx";
            const string outputDocumentPath = "ExampleOutput.docx";
             
            using (Document document = generator.DocumentFactory(sourceDocumentPath))
            {
                Dictionary&lt;string, ReplacementItem&gt; replacement =
                    new Dictionary&lt;string, ReplacementItem&gt;
                    {
                        {
                            "[ReplaceMe]",
                            new ReplacementItem { Value = TestEnum.FirstValue }
                        }
                    };
             
                generator.Config.InsertSpacesIntoEnumValues = false;
             
                generator.Replace(document, replacement);
             
                generator.SaveDocument(document, outputDocumentPath);
            }</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\ExampleTemplate.docx"
            Const outputDocumentPath As String = "ExampleOutput.docx"
             
            Using document As Document = generator.DocumentFactory(sourceDocumentPath)
                Dim replacement As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = TestEnum.FirstValue} }}
             
                generator.Config.InsertSpacesIntoEnumValues = False
             
                generator.Replace(document, replacement)
             
                generator.SaveDocument(document, outputDocumentPath)
            End Using</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.WordReports.Configuration.TrueText">
            <summary>
            The text when a boolean is true. The default is True
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\ExampleTemplate.docx";
            const string outputDocumentPath = "ExampleOutput.docx";
             
            using (Document document = generator.DocumentFactory(sourceDocumentPath))
            {
                Dictionary&lt;string, ReplacementItem&gt; replacement =
                    new Dictionary&lt;string, ReplacementItem&gt;
                    {
                        {
                            "[ReplaceMe]",
                            new ReplacementItem { Value = true }
                        }
                    };
             
                generator.Config.TrueText = "Yes";
             
                generator.Replace(document, replacement);
             
                generator.SaveDocument(document, outputDocumentPath);
            }</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\ExampleTemplate.docx"
            Const outputDocumentPath As String = "ExampleOutput.docx"
             
            Using document As Document = generator.DocumentFactory(sourceDocumentPath)
                Dim replacement As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = True} }}
             
                generator.Config.TrueText = "Yes"
             
                generator.Replace(document, replacement)
             
                generator.SaveDocument(document, outputDocumentPath)
            End Using</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.WordReports.Configuration.FalseText">
            <summary>
            The text when a boolean is false. The default is False
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\ExampleTemplate.docx";
            const string outputDocumentPath = "ExampleOutput.docx";
             
            using (Document document = generator.DocumentFactory(sourceDocumentPath))
            {
                Dictionary&lt;string, ReplacementItem&gt; replacement =
                    new Dictionary&lt;string, ReplacementItem&gt;
                    {
                        {
                            "[ReplaceMe]",
                            new ReplacementItem { Value = false }
                        }
                    };
             
                generator.Config.FalseText = "No";
             
                generator.Replace(document, replacement);
             
                generator.SaveDocument(document, outputDocumentPath);
            }</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\ExampleTemplate.docx"
            Const outputDocumentPath As String = "ExampleOutput.docx"
             
            Using document As Document = generator.DocumentFactory(sourceDocumentPath)
                Dim replacement As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = False} }}
             
                generator.Config.FalseText = "No"
             
                generator.Replace(document, replacement)
             
                generator.SaveDocument(document, outputDocumentPath)
            End Using</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.WordReports.Configuration.MinValueDateText">
            <summary>
            The default text when a date is DateTime.MinValue. The default is string.Empty
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\ExampleTemplate.docx";
            const string outputDocumentPath = "ExampleOutput.docx";
             
            using (Document document = generator.DocumentFactory(sourceDocumentPath))
            {
                Dictionary&lt;string, ReplacementItem&gt; replacement =
                    new Dictionary&lt;string, ReplacementItem&gt;
                    {
                        {
                            "[ReplaceMe]",
                            new ReplacementItem { Value = DateTime.MinValue }
                        }
                    };
             
                generator.Config.MinValueDateText = "Min";
             
                generator.Replace(document, replacement);
             
                generator.SaveDocument(document, outputDocumentPath);
            }</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\ExampleTemplate.docx"
            Const outputDocumentPath As String = "ExampleOutput.docx"
             
            Using document As Document = generator.DocumentFactory(sourceDocumentPath)
                Dim replacement As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = Date.MinValue} }}
             
                generator.Config.MinValueDateText = "Min"
             
                generator.Replace(document, replacement)
             
                generator.SaveDocument(document, outputDocumentPath)
            End Using</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.WordReports.Configuration.NullText">
            <summary>
            The default text when a value is null. The default is string.Empty.
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\ExampleTemplate.docx";
            const string outputDocumentPath = "ExampleOutput.docx";
             
            using (Document document = generator.DocumentFactory(sourceDocumentPath))
            {
                Dictionary&lt;string, ReplacementItem&gt; replacement =
                    new Dictionary&lt;string, ReplacementItem&gt;
                    {
                        {
                            "[ReplaceMe]",
                            new ReplacementItem { Value = null }
                        }
                    };
             
                generator.Config.NullText = "(null)";
             
                generator.Replace(document, replacement);
             
                generator.SaveDocument(document, outputDocumentPath);
            }</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\ExampleTemplate.docx"
            Const outputDocumentPath As String = "ExampleOutput.docx"
             
            Using document As Document = generator.DocumentFactory(sourceDocumentPath)
                Dim replacement As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = Nothing} }}
             
                generator.Config.NullText = "(null)"
             
                generator.Replace(document, replacement)
             
                generator.SaveDocument(document, outputDocumentPath)
            End Using</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.WordReports.Configuration.NoItemsMessage">
            <summary>
            When there are no items in a list or data table the NoItemsMessage 
            will show on the second row.
            The default is "No items found"
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\ExampleTemplate.docx";
            const string outputDocumentPath = "ExampleOutput.docx";
             
            using (Document document = generator.DocumentFactory(sourceDocumentPath))
            {
                DataTable dataTable = new DataTable();
                dataTable.Columns.Add("FirstName", typeof(string));
             
                Dictionary&lt;string, ReplacementItem&gt; replacement =
                    new Dictionary&lt;string, ReplacementItem&gt;
                        {
                            {
                                "[ReplaceMe]",
                                new ReplacementItem {Value = dataTable}
                            }
                        };
             
                generator.Config.NoItemsMessage = "No rows found";
             
                generator.Replace(document, replacement);
             
                generator.SaveDocument(document, outputDocumentPath);
            }</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\ExampleTemplate.docx"
            Const outputDocumentPath As String = "ExampleOutput.docx"
             
            Using document As Document = generator.DocumentFactory(sourceDocumentPath)
                Dim dataTable As New DataTable()
                dataTable.Columns.Add("FirstName", GetType(String))
             
                Dim replacement As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = dataTable} }}
             
                generator.Config.NoItemsMessage = "No rows found"
             
                generator.Replace(document, replacement)
             
                generator.SaveDocument(document, outputDocumentPath)
            End Using</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.WordReports.Configuration.InsertPageBreaks">
            <summary>
            Insert page breaks when performing a search and replace of lists of items.
            The default is true.
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\ExampleTemplate.docx";
            const string outputDocumentPath = "ExampleOutput.docx";
             
            using (Document document = generator.DocumentFactory(sourceDocumentPath))
            {
                Dictionary&lt;string, ReplacementItem&gt; replacement1 =
                    new Dictionary&lt;string, ReplacementItem&gt;
                    {
                        {
                            "[ReplaceMe]",
                            new ReplacementItem { Value = "Text1" }
                        }
                    };
                Dictionary&lt;string, ReplacementItem&gt; replacement2 =
                    new Dictionary&lt;string, ReplacementItem&gt;
                    {
                        {
                            "[ReplaceMe]",
                            new ReplacementItem { Value = "Text2" }
                        }
                    };
                List&lt;Dictionary&lt;string, ReplacementItem&gt;&gt; replacementList =
                    new List&lt;Dictionary&lt;string, ReplacementItem&gt;&gt;
                    {
                        replacement1,
                        replacement2
                    };
             
                generator.Config.InsertPageBreaks = false;
             
                generator.Replace(document, replacementList);
             
                generator.SaveDocument(document, outputDocumentPath);
            }</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\ExampleTemplate.docx"
            Const outputDocumentPath As String = "ExampleOutput.docx"
             
            Using document As Document = generator.DocumentFactory(sourceDocumentPath)
                Dim replacement1 As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = "Text1"} }}
                Dim replacement2 As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = "Text2"} }}
                Dim replacementList As New List(Of Dictionary(Of String, ReplacementItem))() From {replacement1, replacement2}
             
                generator.Config.InsertPageBreaks = False
             
                generator.Replace(document, replacementList)
             
                generator.SaveDocument(document, outputDocumentPath)
            End Using</code>
            </example>
        </member>
        <member name="T:KellermanSoftware.WordReports.Document">
            <summary>
            Information about an Word Document
            </summary>
        </member>
        <member name="M:KellermanSoftware.WordReports.Document.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="sourceDocumentStream">
            The stream to the source document
            </param>
            <param name="closeStreamOnDispose"></param>
        </member>
        <member name="M:KellermanSoftware.WordReports.Document.Dispose">
            <summary>
            Releases all resources used by this document
            </summary>
        </member>
        <member name="P:KellermanSoftware.WordReports.Document.Author">
            <summary>
            Author Property in the Word Document
            </summary>
        </member>
        <member name="P:KellermanSoftware.WordReports.Document.Title">
            <summary>
            Title Property in the Word Document
            </summary>
        </member>
        <member name="P:KellermanSoftware.WordReports.Document.LastSavedBy">
            <summary>
            Last Saved By Property in the Word Document
            </summary>
        </member>
        <member name="P:KellermanSoftware.WordReports.Document.Subject">
            <summary>
            Subject Property in the Word Document
            </summary>
        </member>
        <member name="P:KellermanSoftware.WordReports.Document.CreatedTime">
            <summary>
            Created Time Property in the Word Document
            </summary>
        </member>
        <member name="T:KellermanSoftware.Licensing.IniFile">
            <summary>
            Create a New INI file to store or load data
            <BR /><b>Author:</b>  Gregory T. Finzer<BR />
            <b>Date:</b>  10/12/2002
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniFile.#ctor(System.String)">
            <summary>
            INIFile Constructor.
            </summary>
            <PARAM name="INIPath">File Path to the INI File</PARAM>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniFile.IniWriteValue(System.String,System.String,System.String)">
            <summary>
            Write Data to the INI File
            </summary>
            <param name="section">Section Name</param>
            <param name="key">Key Name</param>
            <param name="value">Value Name</param>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniFile.CheckINIPath">
            <summary>
            Ensure the directory exists for the 
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniFile.IniReadValue(System.String,System.String)">
            <summary>
            Read Data from an INI File
            </summary>
            <param name="section">Section Name</param>
            <param name="key">Key Name</param>
            <returns>Value</returns>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniFile.Path">
            <summary>
            Returns the path to the ini file
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniFile.INIPathWritable">
            <summary>
            Returns True if the INI path is writable
            </summary>
        </member>
        <member name="T:KellermanSoftware.Licensing.Entry">
            <summary>
            Hold Subscription Entries 
            </summary>
        </member>
        <member name="T:KellermanSoftware.Licensing.IniReaderWriter">
            <summary>
            Fully Managed INI File Reader and Writer without any COM Interop
            See:  http://en.wikipedia.org/wiki/INI_file
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetPrivateProfileString(System.String,System.String,System.String,System.String@,System.Int32,System.String)">
            <summary>
            Managed version of GetPrivateProfileString<br/>
            No COM Interop is used<br/>
            If the file does not exist or the value is not in the file, the defaultValue is used.<br/>
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
            <param name="sectionName">The INI Section Name</param>
            <param name="settingName">The INI Setting Name</param>
            <param name="defaultValue">The default value if there is no value</param>
            <param name="returnedString">Output of the string</param>
            <param name="size">The number of buffer characters (not used but here for backward compatibility)</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>Number of characters returned</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetPrivateProfileString(System.String,System.String,System.String,System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            Managed version of GetPrivateProfileString<br/>
            No COM Interop is used<br/>
            If the file does not exist or the value is not in the file, the defaultValue is used.<br/>
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
            <param name="sectionName">The INI Section Name</param>
            <param name="settingName">The INI Setting Name</param>
            <param name="defaultValue">The default value if there is no value</param>
            <param name="returnedBuffer">StrinbBuilder Output of the string</param>
            <param name="size">The number of buffer characters (not used but here for backward compatibility)</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>Number of characters returned</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <summary>
            Managed version of WritePrivateProfileString<br/>
            No COM Interop is used<br/>
            If the file does not exist it will be created.  If the section does not exist it will be created.  If the setting already exists it will be updated.  If the setting does not exist, it will be added.<br/>
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
            <param name="sectionName">The INI Section Name</param>
            <param name="settingName">The INI Setting Name</param>
            <param name="settingValue">The INI Setting Value</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>True if the setting was set successfully</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetPrivateProfileInt(System.String,System.String,System.Int32,System.String)">
            <summary>
            Managed version of GetPrivateProfileInt<br/>
            No COM Interop is used<br/>
            If the file does not exist or the value is not in the file, the defaultValue is used.<br/>
            See:  http://msdn.microsoft.com/en-us/library/windows/desktop/ms724348%28v=vs.85%29.aspx
            </summary>
            <param name="sectionName">The INI Section Name</param>
            <param name="settingName">The INI Setting Name</param>
            <param name="defaultValue">The default value if there is no value</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>The integer</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetSectionNames(System.String)">
            <summary>
            Get a list of the sections in an INI file<br/>
            No COM Interop is used<br/>
            If the file does not exist, no sections will be returned.
            </summary>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when filePath is null</exception>
            <returns>A list of the section names</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetSectionValues(System.String,System.String)">
            <summary>
            Get a dictionary of the key value pairs for a section in an INI file<br/>
            No COM Interop is used<br/>
            If the file does not exist, no items will be returned.
            </summary>
            <param name="sectionName">The section name</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, or filePath is null</exception>
            <returns>A list of the settings and their values</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.SettingExists(System.String,System.String,System.String)">
            <summary>
            Return true if a setting exists<br/>
            No COM Interop is used<br/>
            If the file does not exist or the setting does not exist, the value returned will be false.
            </summary>
            <param name="sectionName">The section name</param>
            <param name="settingName">The setting name</param>
            <param name="filePath">The path to the INI File</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.GetSetting(System.String,System.String,System.String)">
            <summary>
            Get the value for a setting in a section<br/>
            No COM Interop is used<br/>
            If the file does not exist or the setting does not exist, the value returned will be null.
            </summary>
            <param name="sectionName">The section name</param>
            <param name="settingName">The setting name</param>
            <param name="filePath">The path to the INI File</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.SaveSetting(System.String,System.String,System.String,System.String)">
            <summary>
            Save a value to an INI file<br/>
            No COM Interop is used<br/>
            If the file does not exist it will be created.  If the section does not exist it will be created.  If the setting already exists it will be updated.  If the setting does not exist, it will be added.<br/>
            </summary>
            <param name="sectionName">The section name</param>
            <param name="settingName">The setting name</param>
            <param name="settingValue">The value to set</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>True if it was saved successfully</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.IniReaderWriter.DeleteSetting(System.String,System.String,System.String)">
            <summary>
            Delete a setting from an INI file<br/>
            No COM Interop is used<br/>
            If the file does not exist or the value does not exist, false will be returned.
            </summary>
            <param name="sectionName">The name of the section</param>
            <param name="settingName">The name of the setting</param>
            <param name="filePath">The path to the INI file</param>
            <exception cref="T:System.ArgumentNullException">Occurs when sectionName, settingName or filePath is null</exception>
            <returns>True if the setting was deleted</returns>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniReaderWriter.FileEncoding">
            <summary>
            Override the file encoding.  The default is Encoding.Default
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniReaderWriter.IsProcessEscapeCharactersEnabled">
            <summary>
            If true, escape characters will be processed.  The default is false.
            See http://en.wikipedia.org/wiki/INI_file
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniReaderWriter.CommentCharacter">
            <summary>
            The comment character.  By default it is a semicolon
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.IniReaderWriter.Delimiter">
            <summary>
            The delimiter between settings and values.  By default it is a equals sign
            </summary>
        </member>
        <member name="T:KellermanSoftware.Licensing.Encryption">
            <summary>
            This class provides methods Encryption and Decryption using a variety
            of cryptographic algorithms. The methods are overloaded to perform
            encryption/decryption on ordinary texts of string, a MemoryStream
            or a complete file (text or binary).
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.alg">
            <summary>
            The variable that will hold the relevant instantiated cryptographic class object.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.provider">
            <summary>
            Enumeration that specifies the cryptographic service provider.
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.strKey">
            <summary>
            Serves as password used with salt to generate Key for encryption
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.strSalt">
            <summary>
            The salt used for generating Key for encryption
            </summary>
        </member>
        <member name="F:KellermanSoftware.Licensing.Encryption.ivChars">
            <summary>
            The character array from which we set our initialization vector.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.#ctor">
            <summary>
            Default constructor for the Encryption class.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.#ctor(System.String,System.String)">
            <summary>
            Alternate Constructor for the Encryption class.
            </summary>
            <param name="strKey">The password used for generating the Key.</param>
            <param name="strSalt">The Salt to be used in conjunction with 
            the password to generate the actual Key.</param>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.GetIV">
            <summary>
            Get an initialization vector for the crypto algorithms.
            TODO: Random IV Generation
            </summary>
            <returns>a byte array that contains the generated initialization vector.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.GetKey">
            <summary>
            Gets the appropriate key for the cryptographic algorithm being used.
            </summary>
            <returns>a byte array that contains the generated key.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.InitializeAlgorithm(KellermanSoftware.Licensing.EncryptionProvider)">
            <summary>
            Instantiates the SymmetricAlgorithm object with the appropriate
            cryptographic service provider class.
            </summary>
            <param name="encryptionType">Enumeration that specifies which cryptographic
            algorithm is being used.</param>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Encrypt(KellermanSoftware.Licensing.EncryptionProvider,System.String)">
            <summary>
            Encrypts a plain string.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="input">The input clear string.</param>
            <returns>A base64-encoded representation of the encrypted string.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Encrypt(KellermanSoftware.Licensing.EncryptionProvider,System.IO.MemoryStream)">
            <summary>
            Encrypts a MemoryStream.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="memStream">The input MemoryStream object</param>
            <returns>A base64-encoded MemoryStream object</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Encrypt(KellermanSoftware.Licensing.EncryptionProvider,System.String,System.String)">
            <summary>
            Encrypts the contents of a text file and outputs them to another file.
            TODO: Convert to Base64
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="inputFile">The path to the input file.</param>
            <param name="outputFile">The path to the output file.</param>
            <returns>A boolean that specifies whether the encryption operation was successful or not.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Decrypt(KellermanSoftware.Licensing.EncryptionProvider,System.String)">
            <summary>
            Decrypts a base64-encoded string.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="input">The input clear string.</param>
            <returns>The decrypted plain text.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Decrypt(KellermanSoftware.Licensing.EncryptionProvider,System.IO.MemoryStream)">
            <summary>
            Decrypts a base64-encoded MemoryStream.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="memStream">A base64-encoded MemoryStream object.</param>
            <returns>Simple MemoryStream object.</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.Encryption.Decrypt(KellermanSoftware.Licensing.EncryptionProvider,System.String,System.String)">
            <summary>
            Decrypts the contents of a text file and outputs them to another file.
            </summary>
            <param name="encryptionType">Specifies what encryption algorithm is to be used.</param>
            <param name="inputFile">The path to the input file.</param>
            <param name="outputFile">The path to the output file.</param>
            <returns>A boolean that specifies whether the decryption operation was successful or not.</returns>
        </member>
        <member name="P:KellermanSoftware.Licensing.Encryption.Key">
            <summary>
            Public property for Key
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.Encryption.Salt">
            <summary>
            Public property for Salt
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="productCode"></param>
            <param name="productName"></param>
            <param name="website"></param>
            <param name="userName"></param>
            <param name="license"></param>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.ValidateInput">
            <summary>
            Ensure required input
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.UsDateToString(System.DateTime)">
            <summary>
            Convert a DateTime to a US date string
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.UsDateToDate(System.String)">
            <summary>
            Convert a US formatted date to DateTime
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SetTargetLicense">
            <summary>
            Set the target license for the 
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SetupVariables">
            <summary>
            A bunch of variable initialization
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.StartTrial">
            <summary>
            This is a new installation so start the trial
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.BetaExpired">
            <summary>
            Returns true if the beta has expired
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.AllKeysBlank">
            <summary>
            Returns true if all the keys are blank
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SomeKeysBlank">
            <summary>
            Returns true if some of the keys are blank
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetKeys">
            <summary>
            Get all the keys from the registry and the INI file
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetTrialExtensions">
            <summary>
            Get the number of trial extensions
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetFailedAttemptsToday">
            <summary>
            Get the number of failed attempts today
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetUserName">
            <summary>
            Get the saved user name from the registry
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetLicense">
            <summary>
            Get the saved user name from the registry
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetLastRunDate">
            <summary>
            Get the last date the component was run, prevents back dating
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetInstallationDate">
            <summary>
            Get the date the component was installed
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.CombineKey(System.String)">
            <summary>
            Combine the key for the 
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.ReadFromIni(System.String)">
            <summary>
            Read the key from the INI file
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.ReadFromRegistry(System.String)">
            <summary>
            Read the key from the registry
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SaveToRegistryAndIni(System.String,System.String)">
            <summary>
            Save the key and value to the registry and INI file.  
            Use the different encryption key for each.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SaveToRegistry(System.String,System.String)">
            <summary>
            Save the key to the registry
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.SaveToIniFile(System.String,System.String)">
            <summary>
            Save a key to an INI file
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.UpperLetterSpace(System.String)">
            <summary>
            Make the text upper case and return only letters and spaces
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetProductShortName(System.String)">
            <summary>
            Extract product short name from the given product code.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetMajorVersion(System.String)">
            <summary>
            Extract major version from the given product code.
            </summary>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.ExtendTrial(System.String)">
            <summary>
            Trial extensions are good for the current day and the the next day
            </summary>
            <param name="trialExtension"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.TrialMessage">
            <summary>
            User friendly trial days remaining
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.TrialDaysLeft">
            <summary>
            Returns the number of days left in the trial
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.CheckLicense">
            <summary>
            Check to see if it is a valid license OR the user is within the trial period
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.TrialValid">
            <summary>
            Returns true if the trial is valid, false if it is expired, hacked, or backdated
            </summary>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Mid(System.Object,System.Int32,System.Int32)">
            <summary>
            Same as VB mid function except it doesn't bomb at all
            </summary>
            <param name="oString">String to parse</param>
            <param name="iStart">Start of string</param>
            <param name="iLength">Length of section</param>
            <returns>Section of string</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Mid(System.Object,System.Int32)">
            <summary>
            Same as VB mid function except it doesn't bomb at all
            </summary>
            <param name="oString">String to parse</param>
            <param name="iStart">Starting position</param>
            <returns>The string section</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Asc(System.String)">
            <summary>
            Get the ASCII value for the left most character of the passed string.
            </summary>
            <param name="sInString">The string to parse.</param>
            <returns>ACSCII value of the leftmost character</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.Right(System.Object,System.Int32)">
            <summary>
            Same as VB function but doesn't bomb
            </summary>
            <param name="oString">The string to parse</param>
            <param name="iLength">Starting Right Position</param>
            <returns>String section</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetLastWord(System.String,System.String)">
            <summary>
            Get the last word in a string
            </summary>
            <param name="sSentence"></param>
            <param name="sSeperator"></param>
            <returns></returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.NumberOfWords(System.String,System.String)">
            <summary>
            Calculate the number of words in a string
            </summary>
            <param name="sSentence">String to parse</param>
            <param name="sSeperator">Seperator character or string</param>
            <returns>The number of words in the string</returns>
        </member>
        <member name="M:KellermanSoftware.Licensing.LicensingLibrary.GetField(System.String,System.Int32,System.String)">
            <summary>
            Parses sSentence delimited by sSeperator and returns the word specified by iPosition
            </summary>
            <param name="sSentence">The string to parse</param>
            <param name="iPosition">Which word to look for</param>
            <param name="sSeperator">What the words are delmited by</param>
            <returns>"" or the word found</returns>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.AdditionalInfo">
            <summary>
            Additional information about the success or failure of a public method
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.FailedAttemptsToday">
            <summary>
            The failed attempts at checking a license today
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.TrialExtensions">
            <summary>
            The number of trial extensions for this user
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.TrialDays">
            <summary>
            The number of days for a trial period
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.BetaExpirationDate">
            <summary>
            Returns the maximum date the software can run in beta
            </summary>
        </member>
        <member name="P:KellermanSoftware.Licensing.LicensingLibrary.IsService">
            <summary>
            Gets a value indicating whether the application is a windows service.
            </summary>
            <value>
            <c>true</c> if this instance is service; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:KellermanSoftware.WordReports.ReplacementItem">
            <summary>
            Defines the value and how it will be formatted when it is replaced in the word document
            </summary>
        </member>
        <member name="M:KellermanSoftware.WordReports.ReplacementItem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:KellermanSoftware.WordReports.ReplacementItem.Value">
            <summary>
            Supported types are bool, byte, char, decimal, double, enum, float, 
            int, long, short, unit, ulong, ushort, string, DateTime, Image, 
            DataTable and List&lt;T&gt; where T is a class
            </summary>
        </member>
        <member name="P:KellermanSoftware.WordReports.ReplacementItem.ColumnDefinitions">
            <summary>
            This only applies to List&lt;T&gt; or DataTable Values. 
            If empty, it uses the default formatting.
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\ExampleTemplate.docx";
            const string outputDocumentPath = "ExampleOutput.docx";
             
            using (Document document = generator.DocumentFactory(sourceDocumentPath))
            {
                DataTable dataTable = new DataTable();
                dataTable.Columns.Add("FirstName", typeof(string));
                dataTable.Columns.Add("LastName", typeof(string));
                dataTable.Columns.Add("Salary", typeof(decimal));
             
                dataTable.Rows.Add("John", "Smith", 30000M);
                dataTable.Rows.Add("Joe", "Jones", 45000M);
             
                List&lt;ColumnDefinition&gt; columnDefinitions =
            new List&lt;ColumnDefinition&gt;
                    {
                        new ColumnDefinition("LastName"),
                        new ColumnDefinition("FirstName"),
                        new ColumnDefinition("Salary")
                            {
                                AddTotalAtTheEnd = true
                            }
                    };
             
                Dictionary&lt;string, ReplacementItem&gt; replacement =
                    new Dictionary&lt;string, ReplacementItem&gt;
                        {
                            {
                                "[ReplaceMe]",
                                new ReplacementItem {Value = dataTable, ColumnDefinitions = columnDefinitions}
                            }
                        };
             
                generator.Replace(document, replacement);
                generator.SaveDocument(document, outputDocumentPath);
            }</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\ExampleTemplate.docx"
            Const outputDocumentPath As String = "ExampleOutput.docx"
             
            Using document As Document = generator.DocumentFactory(sourceDocumentPath)
                Dim dataTable As New DataTable()
                dataTable.Columns.Add("FirstName", GetType(String))
                dataTable.Columns.Add("LastName", GetType(String))
                dataTable.Columns.Add("Salary", GetType(Decimal))
             
                dataTable.Rows.Add("John", "Smith", 30000D)
                dataTable.Rows.Add("Joe", "Jones", 45000D)
             
                Dim columnDefinitions As New List(Of ColumnDefinition)() From { _
                    New ColumnDefinition("LastName"), _
                    New ColumnDefinition("FirstName"), _
                    New ColumnDefinition("Salary") With {.AddTotalAtTheEnd = True} _
                }
             
                Dim replacement As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = dataTable, .ColumnDefinitions = columnDefinitions} }}
             
                generator.Replace(document, replacement)
                generator.SaveDocument(document, outputDocumentPath)
            End Using</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.WordReports.ReplacementItem.CustomFormatString">
            <summary>
            A .NET Custom Format String for single values such as decimal and DateTime.
            Does not apply to List&lt;T&gt; or DataTable Values.
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called ExampleTemplate.docx with the text [InvoiceDate] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\ExampleTemplate.docx";
            const string outputDocumentPath = "ExampleOutput.docx";
             
            Dictionary&lt;string, ReplacementItem&gt; replacement =
                new Dictionary&lt;string, ReplacementItem&gt;
                    {
                        {
                            "[InvoiceDate]",
                            new ReplacementItem { Value = DateTime.Now, CustomFormatString = "MM/dd/yyyy" }
                        }
                    };
             
            generator.GenerateWordReport(sourceDocumentPath,
                                          outputDocumentPath,
                                          replacement);</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called ExampleTemplate.docx with the text [InvoiceDate] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\ExampleTemplate.docx"
            Const outputDocumentPath As String = "ExampleOutput.docx"
             
            Dim replacement As New Dictionary(Of String, ReplacementItem)() From {{ "[InvoiceDate]", New ReplacementItem With {.Value = Date.Now, .CustomFormatString = "MM/dd/yyyy"} }}
             
            generator.GenerateWordReport(sourceDocumentPath, outputDocumentPath, replacement)</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.WordReports.ReplacementItem.ImageTextWrapping">
            <summary>
            If Value is Image then wrapping is set here. Default is InLineWithText.
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called TextWrappingSourceDocumentation.docx with the text [Image] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\TextWrappingSourceDocumentation.docx";
            const string outputDocumentPath = "ImageDocumentationTest.docx";
            const string imagePath = @"Test Documents\KellermanSoftwareImage.png";
             
            Dictionary&lt;string, ReplacementItem&gt; replacement =
                new Dictionary&lt;string, ReplacementItem&gt;
                    {
                        {
                            "[Image]",
                            new ReplacementItem 
                                { 
                                    Value = Image.FromFile(imagePath),
                                    ImageTextWrapping = TextWrapping.Square
                                }
                        }
                    };
             
            generator.GenerateWordReport(sourceDocumentPath,
                                          outputDocumentPath,
                                          replacement);</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called TextWrappingSourceDocumentation.docx with the text [Image] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\TextWrappingSourceDocumentation.docx"
            Const outputDocumentPath As String = "ImageDocumentationTest.docx"
            Const imagePath As String = "Test Documents\KellermanSoftwareImage.png"
             
            Dim replacement As New Dictionary(Of String, ReplacementItem)() From {{ "[Image]", New ReplacementItem With {.Value = Image.FromFile(imagePath), .ImageTextWrapping = TextWrapping.Square} }}
             
            generator.GenerateWordReport(sourceDocumentPath, outputDocumentPath, replacement)</code>
            </example>
        </member>
        <member name="T:KellermanSoftware.WordReports.TextWrapping">
            <summary>
            Text wrapping values
            </summary>
        </member>
        <member name="F:KellermanSoftware.WordReports.TextWrapping.InLineWithText">
            <summary>
            Image appears in the same line with text
            </summary>
        </member>
        <member name="F:KellermanSoftware.WordReports.TextWrapping.Square">
            <summary>
            Text wraps around a square space that surrounds the image
            </summary>
        </member>
        <member name="F:KellermanSoftware.WordReports.TextWrapping.Tight">
            <summary>
            Text wraps around the image edges
            </summary>
        </member>
        <member name="F:KellermanSoftware.WordReports.TextWrapping.Through">
            <summary>
            Text wraps around the image edges
            </summary>
        </member>
        <member name="F:KellermanSoftware.WordReports.TextWrapping.TopAndBottom">
            <summary>
            Text flows above and below the image
            </summary>
        </member>
        <member name="F:KellermanSoftware.WordReports.TextWrapping.BehindText">
            <summary>
            The image appears behind the text
            </summary>
        </member>
        <member name="F:KellermanSoftware.WordReports.TextWrapping.InFrontOfText">
            <summary>
            The image appears in front of the text
            </summary>
        </member>
        <member name="M:KellermanSoftware.Common.Util.ExtractPath(System.String)">
            <summary>
            Extract the path from a path ending in a filename 
            </summary>
            <param name="fullPath">A fully qualified path ending in a filename</param>
            <returns>The extacted path</returns>
        </member>
        <member name="M:KellermanSoftware.Common.Util.Writable(System.String)">
            <summary>
            Check to see if the program can create, update, and delete in the specified path.
            </summary>
            <param name="path">The path to check.</param>
            <returns>True if the path is writable.</returns>
        </member>
        <member name="T:KellermanSoftware.WordReports.WordReportsException">
            <summary>
            Occurs when there is an exception generating a word document
            </summary>
        </member>
        <member name="M:KellermanSoftware.WordReports.WordReportsException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:KellermanSoftware.WordReports.WordReportsException.#ctor(System.String)">
            <summary>
            Constructor with a message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:KellermanSoftware.WordReports.WordReportsException.#ctor(System.String,System.Object[])">
            <summary>
            Constructor with a formatted message and parameters
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:KellermanSoftware.WordReports.WordReportsException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor with an inner exception
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:KellermanSoftware.WordReports.WordReportsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor with the streaming context
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:KellermanSoftware.WordReports.WordReportsGenerator">
            <summary>
            Easily generate word documents with a single line of code
            </summary>
        </member>
        <member name="M:KellermanSoftware.WordReports.WordReportsGenerator.#ctor">
            <summary>
            Constructor for trial mode
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //Trial Mode
            WordReportsGenerator generator = new WordReportsGenerator(); 
             
            //License Mode
            WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here");</code>
            	<code title="Example2" description="" lang="VB.NET">
            'Trial Mode
            Dim generator As New WordReportsGenerator()
             
            'License Mode
            Dim generator As New WordReportsGenerator("place user name here", "place license key here")</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.WordReports.WordReportsGenerator.#ctor(System.String,System.String)">
            <summary>
            Constructor for licensed mode
            </summary>
            <param name="userName"></param>
            <param name="licenseKey"></param>
            <example>
            	<code title="Example" description="" lang="CS">
            //Trial Mode
            WordReportsGenerator generator = new WordReportsGenerator(); 
             
            //License Mode
            WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here");</code>
            	<code title="Example2" description="" lang="VB.NET">
            'Trial Mode
            Dim generator As New WordReportsGenerator()
             
            'License Mode
            Dim generator As New WordReportsGenerator("place user name here", "place license key here")</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.WordReports.WordReportsGenerator.GenerateWordReport(System.String,System.String,System.Collections.Generic.Dictionary{System.String,KellermanSoftware.WordReports.ReplacementItem})">
            <summary>
            Replace items in the source document and create a new word document
            </summary>
            <param name="sourceDocumentPath">
            The path to a docx file to use as a template for the report
            </param>
            <param name="outputDocumentPath">
            The output path for the docx file
            </param>
            <param name="replacement">Replacement values</param>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\ExampleTemplate.docx";
            const string outputDocumentPath = "ExampleOutput.docx";
             
            Dictionary&lt;string, ReplacementItem&gt; replacement =
                new Dictionary&lt;string, ReplacementItem&gt;
                    {
                        {
                            "[ReplaceMe]",
                            new ReplacementItem { Value = "This is a test" }
                        }
                    };
             
            generator.GenerateWordReport(sourceDocumentPath,
                                          outputDocumentPath,
                                          replacement);</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\ExampleTemplate.docx"
            Const outputDocumentPath As String = "ExampleOutput.docx"
             
            Dim replacement As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = "This is a test"} }}
             
            generator.GenerateWordReport(sourceDocumentPath, outputDocumentPath, replacement)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.WordReports.WordReportsGenerator.GenerateWordReport(System.String,System.String,System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,KellermanSoftware.WordReports.ReplacementItem}})">
            <summary>
            Replace items in the source document and create a new multi-page word document
            </summary>
            <param name="sourceDocumentPath">
            The path to a docx file to use as a template for the report
            </param>
            <param name="outputDocumentPath">
            The output path for the docx file
            </param>
            <param name="replacement">Replacement values</param>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\ExampleTemplate.docx";
            const string outputDocumentPath = "ExampleOutput.docx";
             
            List&lt;Dictionary&lt;string,ReplacementItem&gt;&gt; list = new List&lt;Dictionary&lt;string, ReplacementItem&gt;&gt;();
             
            Dictionary&lt;string, ReplacementItem&gt; replacement1 = new Dictionary&lt;string, ReplacementItem&gt;
                    {
                        {
                            "[ReplaceMe]",
                            new ReplacementItem { Value = "This is a test" }
                        }
                    };
             
            list.Add(replacement1);
             
            Dictionary&lt;string, ReplacementItem&gt; replacement2 = new Dictionary&lt;string, ReplacementItem&gt;
                    {
                        {
                            "[ReplaceMe]",
                            new ReplacementItem { Value = "This is a second test" }
                        }
                    };
             
            list.Add(replacement2);
             
            generator.GenerateWordReport(sourceDocumentPath,
                                          outputDocumentPath,
                                          list);</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\ExampleTemplate.docx"
            Const outputDocumentPath As String = "ExampleOutput.docx"
             
            Dim list As New List(Of Dictionary(Of String,ReplacementItem))()
             
            Dim replacement1 As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = "This is a test"} }}
             
            list.Add(replacement1)
             
            Dim replacement2 As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = "This is a second test"} }}
             
            list.Add(replacement2)
             
            generator.GenerateWordReport(sourceDocumentPath, outputDocumentPath, list)</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.WordReports.WordReportsGenerator.GenerateWordReport(System.IO.Stream,System.IO.Stream,System.Collections.Generic.Dictionary{System.String,KellermanSoftware.WordReports.ReplacementItem})">
            <summary>
            Replace items in the source document and create a new word document
            </summary>
            <param name="sourceDocumentStream">
            The stream with a docx file to use as a template for the report
            </param>
            <param name="outputDocumentStream">
            The output stream for the docx file
            </param>
            <param name="replacement">Replacement values</param>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\ExampleTemplate.docx";
            const string outputDocumentPath = "ExampleOutput.docx";
             
            Dictionary&lt;string, ReplacementItem&gt; replacement =
                new Dictionary&lt;string, ReplacementItem&gt;
                    {
                        {
                            "[ReplaceMe]",
                            new ReplacementItem { Value = "This is a test" }
                        }
                    };
             
            using (FileStream inputStream = new FileStream(sourceDocumentPath, FileMode.Open, FileAccess.Read))
            {
                using (FileStream outputStream = new FileStream(outputDocumentPath, FileMode.Create, FileAccess.Write))
                {
                    generator.GenerateWordReport(inputStream,
                                                 outputStream,
                                                 replacement);
                }
            }</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\ExampleTemplate.docx"
            Const outputDocumentPath As String = "ExampleOutput.docx"
             
            Dim replacement As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = "This is a test"} }}
             
            Using inputStream As New FileStream(sourceDocumentPath, FileMode.Open, FileAccess.Read)
                Using outputStream As New FileStream(outputDocumentPath, FileMode.Create, FileAccess.Write)
                    generator.GenerateWordReport(inputStream, outputStream, replacement)
                End Using
            End Using</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.WordReports.WordReportsGenerator.GenerateWordReport(System.IO.Stream,System.IO.Stream,System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,KellermanSoftware.WordReports.ReplacementItem}})">
            <summary>
            Replace items in the source document and create a new multi-page word document
            </summary>
            <param name="sourceDocumentStream">
            The stream with a docx file to use as a template for the report
            </param>
            <param name="outputDocumentStream">
            The output stream for the docx file
            </param>
            <param name="replacement">Replacement values</param>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\ExampleTemplate.docx";
            const string outputDocumentPath = "ExampleOutput.docx";
             
            List&lt;Dictionary&lt;string, ReplacementItem&gt;&gt; list = new List&lt;Dictionary&lt;string, ReplacementItem&gt;&gt;();
             
            Dictionary&lt;string, ReplacementItem&gt; replacement1 = new Dictionary&lt;string, ReplacementItem&gt;
                    {
                        {
                            "[ReplaceMe]",
                            new ReplacementItem { Value = "This is a test" }
                        }
                    };
             
            list.Add(replacement1);
             
            Dictionary&lt;string, ReplacementItem&gt; replacement2 = new Dictionary&lt;string, ReplacementItem&gt;
                    {
                        {
                            "[ReplaceMe]",
                            new ReplacementItem { Value = "This is a second test" }
                        }
                    };
             
            list.Add(replacement2);
             
            using (FileStream inputStream = new FileStream(sourceDocumentPath, FileMode.Open, FileAccess.Read))
            {
                using (FileStream outputStream = new FileStream(outputDocumentPath, FileMode.Create, FileAccess.Write))
                {
                    generator.GenerateWordReport(inputStream,
                                                 outputStream,
                                                 list);
                }
            }</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\ExampleTemplate.docx"
            Const outputDocumentPath As String = "ExampleOutput.docx"
             
            Dim list As New List(Of Dictionary(Of String, ReplacementItem))()
             
            Dim replacement1 As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = "This is a test"} }}
             
            list.Add(replacement1)
             
            Dim replacement2 As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = "This is a second test"} }}
             
            list.Add(replacement2)
             
            Using inputStream As New FileStream(sourceDocumentPath, FileMode.Open, FileAccess.Read)
                Using outputStream As New FileStream(outputDocumentPath, FileMode.Create, FileAccess.Write)
                    generator.GenerateWordReport(inputStream, outputStream, list)
                End Using
            End Using</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.WordReports.WordReportsGenerator.DocumentFactory(System.String)">
            <summary>
            Creates a new Document In Memory
            </summary>
            <returns>Instantiated Document</returns>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\ExampleTemplate.docx";
            const string outputDocumentPath = "ExampleOutput.docx";
             
            using (Document document = generator.DocumentFactory(sourceDocumentPath))
            {
                Dictionary&lt;string, ReplacementItem&gt; replacement =
                    new Dictionary&lt;string, ReplacementItem&gt;
                        {
                            {
                                "[ReplaceMe]",
                                new ReplacementItem {Value = "This is a test"}
                            }
                        };
             
                generator.Replace(document, replacement);
             
                generator.SaveDocument(document, outputDocumentPath);
            }</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\ExampleTemplate.docx"
            Const outputDocumentPath As String = "ExampleOutput.docx"
             
            Using document As Document = generator.DocumentFactory(sourceDocumentPath)
                Dim replacement As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = "This is a test"} }}
             
                generator.Replace(document, replacement)
             
                generator.SaveDocument(document, outputDocumentPath)
            End Using</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.WordReports.WordReportsGenerator.DocumentFactory(System.IO.Stream)">
            <summary>
            Creates a new Document In Memory
            </summary>
            <returns>Instantiated Document</returns>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\ExampleTemplate.docx";
            const string outputDocumentPath = "ExampleOutput.docx";
             
            using (FileStream inputStream = new FileStream(sourceDocumentPath, FileMode.Open, FileAccess.Read))
            {
                using (Document document = generator.DocumentFactory(inputStream))
                {
             
                    Dictionary&lt;string, ReplacementItem&gt; replacement =
                        new Dictionary&lt;string, ReplacementItem&gt;
                            {
                                {
                                    "[ReplaceMe]",
                                    new ReplacementItem {Value = "This is a test"}
                                }
                            };
             
                    generator.Replace(document, replacement);
             
                    using (FileStream outputStream = new FileStream(outputDocumentPath, FileMode.Create, FileAccess.Write))
                    {
                        generator.SaveDocument(document, outputStream);
                    }
                }
            }</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\ExampleTemplate.docx"
            Const outputDocumentPath As String = "ExampleOutput.docx"
             
            Using inputStream As New FileStream(sourceDocumentPath, FileMode.Open, FileAccess.Read)
                Using document As Document = generator.DocumentFactory(inputStream)
             
                    Dim replacement As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = "This is a test"} }}
             
                    generator.Replace(document, replacement)
             
                    Using outputStream As New FileStream(outputDocumentPath, FileMode.Create, FileAccess.Write)
                        generator.SaveDocument(document, outputStream)
                    End Using
                End Using
            End Using</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.WordReports.WordReportsGenerator.Replace(KellermanSoftware.WordReports.Document,System.Collections.Generic.Dictionary{System.String,KellermanSoftware.WordReports.ReplacementItem})">
            <summary>
            Replace items in the source document
            </summary>
            <param name="document">Source document</param>
            <param name="replacement">Replacement values</param>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\ExampleTemplate.docx";
            const string outputDocumentPath = "ExampleOutput.docx";
             
            using (Document document = generator.DocumentFactory(sourceDocumentPath))
            {
                Dictionary&lt;string, ReplacementItem&gt; replacement =
                    new Dictionary&lt;string, ReplacementItem&gt;
                        {
                            {
                                "[ReplaceMe]",
                                new ReplacementItem {Value = "This is a test"}
                            }
                        };
             
                generator.Replace(document, replacement);
             
                generator.SaveDocument(document, outputDocumentPath);
            }</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\ExampleTemplate.docx"
            Const outputDocumentPath As String = "ExampleOutput.docx"
             
            Using document As Document = generator.DocumentFactory(sourceDocumentPath)
                Dim replacement As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = "This is a test"} }}
             
                generator.Replace(document, replacement)
             
                generator.SaveDocument(document, outputDocumentPath)
            End Using</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.WordReports.WordReportsGenerator.Replace(KellermanSoftware.WordReports.Document,System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,KellermanSoftware.WordReports.ReplacementItem}})">
            <summary>
            Replace items in the source document
            </summary>
            <param name="document">Source document</param>
            <param name="replacement">Replacement values</param>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\ExampleTemplate.docx";
            const string outputDocumentPath = "ExampleOutput.docx";
             
            using (Document document = generator.DocumentFactory(sourceDocumentPath))
            {
                List&lt;Dictionary&lt;string, ReplacementItem&gt;&gt; list = new List&lt;Dictionary&lt;string, ReplacementItem&gt;&gt;();
             
                Dictionary&lt;string, ReplacementItem&gt; replacement1 = new Dictionary&lt;string, ReplacementItem&gt;
                                                                       {
                                                                           {
                                                                               "[ReplaceMe]",
                                                                               new ReplacementItem
                                                                                   {
                                                                                       Value =
                                                                                           "This is a test"
                                                                                   }
                                                                           }
                                                                       };
             
                list.Add(replacement1);
             
                Dictionary&lt;string, ReplacementItem&gt; replacement2 = new Dictionary&lt;string, ReplacementItem&gt;
                                                                       {
                                                                           {
                                                                               "[ReplaceMe]",
                                                                               new ReplacementItem
                                                                                   {
                                                                                       Value =
                                                                                           "This is a second test"
                                                                                   }
                                                                           }
                                                                       };
             
                list.Add(replacement2);
             
                generator.Replace(document, list);
             
                generator.SaveDocument(document, outputDocumentPath);
            }</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\ExampleTemplate.docx"
            Const outputDocumentPath As String = "ExampleOutput.docx"
             
            Using document As Document = generator.DocumentFactory(sourceDocumentPath)
                Dim list As New List(Of Dictionary(Of String, ReplacementItem))()
             
                Dim replacement1 As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = "This is a test"} }}
             
                list.Add(replacement1)
             
                Dim replacement2 As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = "This is a second test"} }}
             
                list.Add(replacement2)
             
                generator.Replace(document, list)
             
                generator.SaveDocument(document, outputDocumentPath)
            End Using</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.WordReports.WordReportsGenerator.SaveDocument(KellermanSoftware.WordReports.Document,System.String)">
            <summary>
            Save document to output path
            </summary>
            <param name="document"></param>
            <param name="outputDocumentPath">
            The output path for the docx file
            </param>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\ExampleTemplate.docx";
            const string outputDocumentPath = "ExampleOutput.docx";
             
            using (Document document = generator.DocumentFactory(sourceDocumentPath))
            {
                Dictionary&lt;string, ReplacementItem&gt; replacement =
                    new Dictionary&lt;string, ReplacementItem&gt;
                        {
                            {
                                "[ReplaceMe]",
                                new ReplacementItem {Value = "This is a test"}
                            }
                        };
             
                generator.Replace(document, replacement);
             
                generator.SaveDocument(document, outputDocumentPath);
            }</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\ExampleTemplate.docx"
            Const outputDocumentPath As String = "ExampleOutput.docx"
             
            Using document As Document = generator.DocumentFactory(sourceDocumentPath)
                Dim replacement As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = "This is a test"} }}
             
                generator.Replace(document, replacement)
             
                generator.SaveDocument(document, outputDocumentPath)
            End Using</code>
            </example>
        </member>
        <member name="M:KellermanSoftware.WordReports.WordReportsGenerator.SaveDocument(KellermanSoftware.WordReports.Document,System.IO.Stream)">
            <summary>
            Save document to output stream
            </summary>
            <param name="document"></param>
            <param name="outputDocumentStream">
            The output stream for the docx file
            </param>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\ExampleTemplate.docx";
            const string outputDocumentPath = "ExampleOutput.docx";
             
            using (FileStream inputStream = new FileStream(sourceDocumentPath, FileMode.Open, FileAccess.Read))
            {
                using (Document document = generator.DocumentFactory(inputStream))
                {
                    Dictionary&lt;string, ReplacementItem&gt; replacement =
                        new Dictionary&lt;string, ReplacementItem&gt;
                            {
                                {
                                    "[ReplaceMe]",
                                    new ReplacementItem {Value = "This is a test"}
                                }
                            };
             
                    generator.Replace(document, replacement);
             
                    using (FileStream outputStream = new FileStream(outputDocumentPath, FileMode.Create, FileAccess.Write))
                    {
                        generator.SaveDocument(document, outputStream);
                    }
                }
            }</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\ExampleTemplate.docx"
            Const outputDocumentPath As String = "ExampleOutput.docx"
             
            Using inputStream As New FileStream(sourceDocumentPath, FileMode.Open, FileAccess.Read)
                Using document As Document = generator.DocumentFactory(inputStream)
                    Dim replacement As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = "This is a test"} }}
             
                    generator.Replace(document, replacement)
             
                    Using outputStream As New FileStream(outputDocumentPath, FileMode.Create, FileAccess.Write)
                        generator.SaveDocument(document, outputStream)
                    End Using
                End Using
            End Using</code>
            </example>
        </member>
        <member name="P:KellermanSoftware.WordReports.WordReportsGenerator.Config">
            <summary>
            Set the global configuration
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            //To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            WordReportsGenerator generator = new WordReportsGenerator(); //Trial Mode
            //WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            const string sourceDocumentPath = @"Test Documents\ExampleTemplate.docx";
            const string outputDocumentPath = "ExampleOutput.docx";
             
            Dictionary&lt;string, ReplacementItem&gt; replacement =
                new Dictionary&lt;string, ReplacementItem&gt;
                    {
                        {
                            "[ReplaceMe]",
                            new ReplacementItem { Value = null }
                        }
                    };
             
            generator.Config.NullText = "Custom Null Text";
            generator.GenerateWordReport(sourceDocumentPath,
                                          outputDocumentPath,
                                          replacement);</code>
            	<code title="Example2" description="" lang="VB.NET">
            'To run this example code, create a word document called ExampleTemplate.docx with the text [ReplaceMe] in the document
             
            Dim generator As New WordReportsGenerator() 'Trial Mode
            'WordReportsGenerator generator = new WordReportsGenerator("place user name here", "place license key here"); //License Mode
             
            Const sourceDocumentPath As String = "Test Documents\ExampleTemplate.docx"
            Const outputDocumentPath As String = "ExampleOutput.docx"
             
            Dim replacement As New Dictionary(Of String, ReplacementItem)() From {{ "[ReplaceMe]", New ReplacementItem With {.Value = Nothing} }}
             
            generator.Config.NullText = "Custom Null Text"
            generator.GenerateWordReport(sourceDocumentPath, outputDocumentPath, replacement)</code>
            </example>
        </member>
    </members>
</doc>
